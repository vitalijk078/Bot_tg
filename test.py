import os
from random import choice, uniform, randint
import asyncio
import datetime

from aiogram import F, Router, types, Bot
from aiogram.filters.command import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config import CHANNEL_ID, REF_URL
from keyboards.client import ClientKeyboard
from other.filters import ChatJoinFilter, RegisteredFilter
from database.db import DataBase

router = Router()


class RegisterState(StatesGroup):
    input_id = State()


class GetSignalStates(StatesGroup):
    chosing_mines = State()


# –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_user_language(user_id):
    user = await DataBase.get_user(user_id)
    if user and user['language']:
        return user['language']
    return 'ru'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π


# –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def set_user_language(user_id, language):
    await DataBase.update_language(user_id, language)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@router.callback_query(F.data == "change_language")
async def change_language_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose a language:",
                                     reply_markup=await ClientKeyboard.language_keyboard())


@router.callback_query(F.data.in_(["lang_ru", "lang_en"]))
async def set_language_handler(callback: types.CallbackQuery):
    if callback.data == "lang_ru":
        await set_user_language(callback.from_user.id, "ru")
        await callback.message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫", reply_markup=await ClientKeyboard.start_keyboard(language="ru"))
    elif callback.data == "lang_en":
        await set_user_language(callback.from_user.id, "en")
        await callback.message.answer("Language changed to English üá¨üáß", reply_markup=await ClientKeyboard.start_keyboard(language="en"))

    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
@router.message(CommandStart())
async def start_command(message: types.Message, bot: Bot):
    await DataBase.register(message.from_user.id, verifed="0")
    language = await get_user_language(message.from_user.id)

    texts = {
        "ru": f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}!</b>

–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ - <b>–ø–æ–¥–ø–∏—à–∏—Å—å</b> –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ªü§ù""",
        "en": f"""
Welcome, <b>{message.from_user.first_name}!</b>

To use the bot - <b>subscribe</b> to our channelü§ù"""
    }

    await message.answer(texts[language], reply_markup=await ClientKeyboard.start_keyboard(language=language), parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@router.callback_query(F.data.in_(["check", "back"]), ChatJoinFilter())
async def menu_output(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    language = await get_user_language(callback.from_user.id)

    texts = {
        "ru": """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ üî∏<b>TRAFF MINES</b>üî∏!

üí£Mines - —ç—Ç–æ –≥–µ–º–±–ª–∏–Ω–≥ –∏–≥—Ä–∞ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ 1win, –∫–æ—Ç–æ—Ä–∞—è –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–º ‚Äú–°–∞–ø—ë—Ä–µ‚Äù.
–í–∞—à–∞ —Ü–µ–ª—å - –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —è—á–µ–π–∫–∏ –∏ –Ω–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ –ª–æ–≤—É—à–∫–∏.

<code>–ù–∞—à –±–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ—Ç OpenAI. ChatGPT 4.0
–û–Ω –º–æ–∂–µ—Ç –ø—Ä–µ–¥—É–≥–∞–¥–∞—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–≤—ë–∑–¥ —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 90%.</code>

‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ùóÔ∏è
–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Ç–æ–ª—å–∫–æ —Å –Ω–æ–≤—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ)
‚ùóÔ∏è –î–õ–Ø –∏–≥—Ä—ã –±–µ–∑ —Ä–∏—Å–∫–∞ ‚ùóÔ∏è
–ù—É–∂–µ–Ω –Ω–æ–≤—ã–π, —á–∏—Å—Ç—ã–π –∞–∫–∫–∞—É–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–º
–¥–µ–ø–æ–∑–∏—Ç–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥ TRAFF500 –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç +500% –∫ –¥–µ–ø–æ–∑–∏—Ç—É (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ)""",
        "en": """
Welcome to üî∏<b>TRAFF MINES</b>üî∏!

üí£Mines is a gambling game in the 1win bookmaker, which is based on the classic ‚ÄúMinesweeper‚Äù.
Your goal is to open safe cells and avoid traps.

<code>Our bot is based on the OpenAI neural network. ChatGPT 4.0
It can predict the location of stars with 90% accuracy.</code>

‚ùóÔ∏è WARNING ‚ùóÔ∏è
The bot works correctly only with new accounts (registration instructions are below).
‚ùóÔ∏è FOR risk-free play ‚ùóÔ∏è
You need a new, clean account, where upon your first deposit you need to enter the promo code TRAFF500, which will give +500% to the deposit (instruction below)."""
    }

    photo = types.FSInputFile("traffsignal2.png")
    await callback.message.answer_photo(
        photo=photo,
        caption=texts[language],
        parse_mode="HTML",
        reply_markup=await ClientKeyboard.menu_keyboard(language=language)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "register")
async def register_handler(callback: types.CallbackQuery, state: FSMContext):
    language = await get_user_language(callback.from_user.id)

    texts = {
        "ru": f"""
üî∑ 1. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç–µ —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–º–æ–∫–æ–¥–∞ TRAFF500 <a href="{REF_URL}">1WIN(CLICK)</a>
üî∑ 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∞–π–¥–∏ –Ω–∞ —Å–∞–π—Ç–µ (–í–∫–ª–∞–¥–∫–∞ '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ' –∏ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –±—É–¥–µ—Ç –≤–∞—à ID).
üî∑ 3. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!""",
        "en": f"""
üî∑ 1. First, register using the link on the site with the REQUIRED use of the promo code TRAFF500 <a href="{REF_URL}">1WIN(CLICK)</a>
üî∑ 2. After successful registration, copy your ID on the website (Tab 'Deposit' and your ID will be in the upper right corner).
üî∑ 3. And send it to the bot in response to this message!"""
    }

    try:
        await callback.message.delete()
    except:
        pass

    photo = types.FSInputFile("reg.png")  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    await callback.message.answer_photo(
        photo=photo,
        caption=texts[language],
        parse_mode="HTML",
        reply_markup=await ClientKeyboard.register_keyboard(language=language)
    )
    await state.set_state(RegisterState.input_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è ID –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(RegisterState.input_id)
async def register_handler_final(message: types.Message, state: FSMContext):
    try:
        number = int(message.text)

        if len(message.text) >= 8:
            await DataBase.update_verifed(message.from_user.id)
            language = await get_user_language(message.from_user.id)
            texts = {
                "ru": "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å",
                "en": "You have successfully registered"
            }
            await message.answer(texts[language], reply_markup=await ClientKeyboard.on_register_keyboard(language=language))
            await state.clear()
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
            return

    except Exception as e:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π ID")
        return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@router.callback_query(F.data == "instruction")
async def instruction_handler(callback: types.CallbackQuery):
    language = await get_user_language(callback.from_user.id)

    texts = {
        "ru": f"""
–ë–æ—Ç –æ—Å–Ω–æ–≤–∞–Ω –∏ –æ–±—É—á–µ–Ω –Ω–∞ –∫–ª–∞—Å—Ç–µ—Ä–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ üñ• <strong>[TRAFF MINES]</strong>.
–î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –±—ã–ª–æ —Å—ã–≥—Ä–∞–Ω–æ üé∞10.000+ –∏–≥—Ä.

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–µ–ª–∞—é—Ç –≤ –¥–µ–Ω—å 20-30% –æ—Ç —Å–≤–æ–µ–≥–æ üí∏ –∫–∞–ø–∏—Ç–∞–ª–∞!
<code>–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ —Å–µ–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏  –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è! –¢–æ—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92%!</code>
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏—Ç–∞ —Å–ª–µ–¥—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:

üü¢ 1. –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–π –∫–æ–Ω—Ç–æ—Ä–µ <a href="{REF_URL}">1WIN</a>
–ï—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è - –∑–∞—Ö–æ–¥–∏–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º VPN (–®–≤–µ—Ü–∏—è). –í Play Market/App Store –ø–æ–ª–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: Vpnify, Planet VPN, Hotspot VPN –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ!
<code>–ë–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É TRAFF500 –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º –Ω–µ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç!</code>
üü¢ 2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
üü¢ 3. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª 1win games –∏ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üí£'MINES'.
üü¢ 4. –í—ã—Å—Ç–∞–≤–∏—Ç—å –∫–æ–ª-–≤–æ –ª–æ–≤—É—à–µ–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ —Ç—Ä—ë—Ö. –≠—Ç–æ –≤–∞–∂–Ω–æ!
üü¢ 5. –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –±–æ—Ç–µ –∏ —Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –∏–∑ –±–æ—Ç–∞.
üü¢ 6. –ü—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ —Å–æ–≤–µ—Ç—É–µ–º —É–¥–≤–æ–∏—Ç—å —Å—Ç–∞–≤–∫—É –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–æ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ.""",
        "en": f"""
The bot is based and trained on the neural network cluster üñ• <strong>[TRAFF MINES]</strong>.
For bot training, üé∞10,000+ games were played.

Currently, bot users successfully earn 20-30% of their üí∏ capital per day!
<code>At present, the bot is still undergoing tests and fixes! The bot's accuracy is 92%!</code>
To achieve maximum profit, follow these instructions:

üü¢ 1. Register in the bookmaker's office <a href="{REF_URL}">1WIN</a>.
If it doesn‚Äôt open - use VPN (set to Sweden). In Play Market/App Store, there are plenty of free services like Vpnify, Planet VPN, Hotspot VPN, etc.
<code>Access to signals will not be opened without registration via the TRAFF500 promo code!</code>
üü¢ 2. Top up your account balance.
üü¢ 3. Go to the 1win games section and select the üí£'MINES' game.
üü¢ 4. Set the number of mines to three. This is important!
üü¢ 5. Request a signal in the bot and follow the signals from the bot.
üü¢ 6. In case of a failed signal, we recommend doubling the bet and using the signal again."""
    }

    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(texts[language], parse_mode="HTML", reply_markup=await ClientKeyboard.back_to_menu_keyboard(language=language))


# –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–≥–æ ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(F.text.regexp(r"\d+"), state=RegisterState.input_id)
async def process_id(message: types.Message, state: FSMContext):
    user_id = message.text
    language = await get_user_language(message.from_user.id)
    try:
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ª–∏—á–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
        if len(user_id) > 7:  # –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
            await message.answer(f"ID {user_id} –ø—Ä–∏–Ω—è—Ç–æ!", reply_markup=await ClientKeyboard.menu_keyboard(language=language))
            await state.clear()
        else:
            await message.answer(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=await ClientKeyboard.back_to_menu_keyboard(language=language))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∏–≥–Ω–∞–ª—ã"
@router.callback_query(F.data == "get_signal", RegisteredFilter())
async def get_signal_handler(callback: types.CallbackQuery, state: FSMContext):
    language = await get_user_language(callback.from_user.id)

    texts = {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (2, 3 –∏–ª–∏ 4 –º–∏–Ω—ã)",
        "en": "Choose the number of mines to set (2, 3, or 4 mines)"
    }

    await callback.message.answer(texts[language], reply_markup=await ClientKeyboard.choose_mines_keyboard(language=language))
    await state.set_state(GetSignalStates.chosing_mines)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–Ω
@router.callback_query(GetSignalStates.chosing_mines, F.data.in_(["2_mines", "3_mines", "4_mines"]))
async def choose_mines_handler(callback: types.CallbackQuery, state: FSMContext):
    chosen_mines = callback.data.split("_")[0]
    language = await get_user_language(callback.from_user.id)

    texts = {
        "ru": f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {chosen_mines} –º–∏–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Å–∏–≥–Ω–∞–ª...",
        "en": f"You selected {chosen_mines} mines. Wait for the signal..."
    }

    await callback.message.answer(texts[language])
    await state.clear()
    # –î–∞–ª–µ–µ –∏–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏